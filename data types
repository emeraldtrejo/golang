//arrays
var x [5]int = [5]{1,2,3,4,5}

x := [3]int {1,2,3}

for i, v range x {
  fmt.Printf("ind %d, val %d", i, v)
}

//slices
arr := [...]string{"a", "b", "c", "d", "e", "f", "g"}
s1 := arr[1:3]
s2 := arr[2:5]

a1 := [3]string("a", "b", "c")
sli1 := a1[0:1]
fmt.Printf(len(sli1), cap(sli1)

//variable
sli = make([]int, 10)

//type bracket int, second is length of slice, last is capaity (size of array)
slic = make([]int, 10, 15)

//append used to increase size of slice
sli = append(sli, 100)


//maps
//             key type-string   value type - int
var idMap map[string]int
idMap = make(map[string]int)

idMap := map[string]int {
  "joe": 123}

//returns a zero if key is not present
fmt.Println(idMap["joe"])

//adding a key/value pair
idMap["jane"] = 456

//delete
delete(idMap,"joe")

//id is value, p is presence of key
id, p := idMap["joe"]

//key is going to be equal to the one key inside the idMap and val is going to be equal to corresponding value in the idMap
for key, val := range idMap {
  fmt.Println(key, val)
}

//structs
type struct Person {
  name string
  addr string
  phone string
}
var p1 Person

p1.name = "joe"

x = p1.addr

//to initialize
p1 := new(Person)

p1 := Person(name: "joe", addr: "a st.", phone: "123")
